name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            preset: default
          - os: macos-latest  
            preset: macos
          - os: windows-latest
            preset: windows

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt.in

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja

    - name: Configure with CMake Presets
      run: |
        cmake --preset=${{ matrix.preset }}

    - name: Build with CMake
      run: |
        cmake --build build/${{ matrix.preset }} --config ${{ env.BUILD_TYPE }}

    - name: Run tests
      run: |
        cd build/${{ matrix.preset }}
        ctest --output-on-failure -C ${{ env.BUILD_TYPE }}

    - name: Run integration tests
      run: |
        python run.py test

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: findword-${{ matrix.os }}
        path: |
          build/${{ matrix.preset }}/bin/
          build/${{ matrix.preset }}/**/*.exe

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cppcheck
        python -m pip install --upgrade pip
        python -m pip install cpplint

    - name: Run static analysis
      run: |
        # Run cppcheck
        cppcheck --enable=all --std=c++23 --suppress=missingIncludeSystem --error-exitcode=1 findword.cpp
        
        # Run clang-tidy
        clang-tidy findword.cpp -- -std=c++23
        
        # Run cpplint for style checking
        cpplint --filter=-whitespace/line_length findword.cpp

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp, python
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  release:
    name: Create Release
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt.in
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Build release packages
      run: |
        # Configure and build
        cmake --preset=release
        cmake --build build/release --config Release
        
        # Create packages
        cd build/release
        cpack

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/release/*.tar.gz
          build/release/*.deb
          build/release/*.rpm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
